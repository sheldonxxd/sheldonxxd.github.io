[{"title":"基于python的DNA定量浓度计算器","url":"/2020/12/29/oligoCalculator/","content":"\n### 起因\n\n使用离线的OligoCalculator只能一个个序列拷贝进去然后输入A260的值，再计算。这样做太繁琐了，如果数量比较少还好。但如果一次性测定比较多的链，很容易复制出错。所以我在《基于紫外可见光吸收光谱的DNA分子定量》文章的基础之上，进一步参照[Thermo的说明](https://www.sigmaaldrich.com/china-mainland/technical-documents/articles/biology/quantitation-of-oligos.html)写了一个能够批量自动根据吸光度计算样品浓度的python版本的oligo calculator。\n\n### 输入\n\n![image-20201229100558994](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229100558994.png)\n\n注意这个表格文件前面三列都是基于紫外可见光吸收光谱的DNA分子定量》文章中代码处理后生成的，而Label、Sequence、Modufication以及DiluteRatio需要自己补充。拿到了这样一张表之后，可以使用下面的表进行计算。\n\n### 代码\n\n```python\nimport pandas as pd\n\ndef getNearestBaseCombination(seq):\n    n = len(seq)\n    data = []\n    for i in range(n-1):\n        data.append(seq[i:i+2])\n    return data\n\ndef getRepeatSingleBase(seq):\n    return list(seq[1:-1])\n\ndef getMolarConc(Abs, Seq, Length=1):\n    '''\n    === 输入参数 ===\n    Abs: Float，测定UV-Vis吸收光谱的峰值，一般为A260\n    Seq: String，寡核苷酸样品的序列 \n    Length: Float，光程，一般为1 cm\n    === 返回值 ===\n    E_seq: 单纯计算序列获得的消光系数，如有修饰基团，请到IDT上查询其消光系数后做浓度校正\n    Conc: Float, 测定样品的摩尔浓度，以uM（umol/L）为单位\n    如要获取原液样品，可自行乘以稀释倍数\n    '''\n    e = {'A':15400, 'C':7400, 'G':11500, 'T':8700, \n        'AA':27400, 'AC':21200, 'AG':25000, 'AT':22800,\n        'CA':21200, 'CC':14600, 'CG':18000, 'CT':15200,\n        'GA':25200, 'GC':17600, 'GG':21600, 'GT':20000,\n        'TA':23400, 'TC':16200, 'TG':19000, 'TT':16800}\n    \n    # 消光系数表格， 参考链接如下\n    # https://www.sigmaaldrich.com/china-mainland/technical-documents/articles/biology/quantitation-of-oligos.html\n    cut = getNearestBaseCombination(Seq)\n    repeat = getRepeatSingleBase(Seq)\n    E_seq = 0\n    for c in cut:\n        E_seq += e[c]\n    for r in repeat:\n        E_seq -= e[r]\n    # E的单位是L ⋅ mol-1 ⋅ cm-1\n    Conc = Abs/(E_seq*Length)*1e6\n    # Conc的单位是 uM\n    return E_seq,Conc\n\ndef main(filepath):\n    '''\n    filepath：输入汇总表格文件路径\n    表格中必须包含样品的吸光值（PeakValue）,序列（Sequence）和稀释倍数(DiluteRatio)三列信息\n    建议在`extractUVspectrum.py`生成的excel文件中补充序列和稀释倍数即可\n    计算完成后，在表格中新增消光系数和原液浓度两列信息\n    '''\n    data = pd.read_excel(filepath)\n    concs = []\n    Es = []\n    for idx, row in data.iterrows():\n        e,c = getMolarConc(row['PeakValue'], row['Sequence'])\n        c = c*row['DiluteRatio']\n        concs.append(c)\n        Es.append(e)\n    data['E(L⋅mol-1⋅cm-1)'] = Es\n    data['Conc(uM)'] = concs\n    data.to_excel(filepath, index=None)\n    print('浓度计算完成，已刷新表格数据！')\n\nif __name__ == \"__main__\":\n    filepath = \"/path/to/ssDNA定量结果.xlsx\"\n    main(filepath)\n```\n\n### 结果\n\n![image-20201229100438254](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229100438254.png)\n\n计算完成后，新出现了两列数据，分别是不同样本所对应的消光系数和稀释前原液的浓度。需要注意，**如果有修饰，自行到[IDT查询修饰基团的消光系数](https://sg.idtdna.com/site/Catalog/Modifications)，跟此表中的消光系数相加，然后根据琅勃比尔定律对浓度进行校正**。\n\n![image-20201229103945287](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229103945287.png)\n\n如上图所示，在excel表格中进行操作即可，最后得到最终的准确的定量浓度结果。","tags":["python","DNA"],"categories":["tools"]},{"title":"基于紫外可见光吸收光谱的DNA分子定量","url":"/2020/12/28/basicUVspectrumAnalysis/","content":"\n我们实验室采集UV-Vis吸收光谱，只能一个一个样品地来。有时候我要对几十条DNA单链做定量的时候，一个个去记录 A_260nm 的数值比较烦（而且有时候峰值会有微弱漂移），所以打算用python写个小工具来实现峰值的提取。\n\n### 数据文件分析\n\n通过仪器配套软件可以导出csv文件，命名格式是`Sample??.样品.csv`。\n\n![image-20201228134634805](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228134634805.png)\n\n但是csv文件内数据比较脏，具体如下：\n\n![image-20201228134427947](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228134427947.png)\n\n第一行和最后一行都不是正经的内容，而第二行的column name也很随意，所以后面在使用pandas模块读取csv文件的时候要做一些处理。\n\n### 完整代码\n\n要实现功能除了得正确读取数据之外，还有以下几个要点：\n\n1. 使用glob收集csv文件（列表顺序未必等同于上样顺序）\n2. 提取sample的ID（对应着你测定样品的顺序）\n3. 使用`np.argmax`获取峰值所在序列的索引，然后取峰值\n4. 根据sampleID对数据进行排序\n\n具体代码如下：\n\n```python\nimport os, glob\nimport numpy as np\nimport pandas as pd\nimport re\n\ndef exportMaxPeak(wks):\n    '''\n    输入包含UV吸收光谱导出csv文件的路径\n    输出A260nm的峰值数据表excel到目录下\n    注意不要导出blank的光谱\n    '''\n    files = glob.glob(os.path.join(wks,'*.csv'))\n    data = []\n    pattern = 'Sample(\\d+).样品.csv'\n    for f in files:\n        # 处理文件名提取ID\n        _, fname = os.path.split(f)\n        # 读取光谱数据\n        label = re.search(pattern, fname)\n        sid = label.group(1) # 直接提取数字\n        sid = float(sid)\n        df = pd.read_csv(f, header=1)\n        mid = np.argmax(df[\"A\"])\n        max_wav = df[\"nm\"][mid]\n        max_OD = df[\"A\"][mid]\n        # 收集数据到列表\n        data.append([int(sid), max_wav, max_OD])\n    # 处理数据表格\n    data = pd.DataFrame(data, columns=[\"Sample\",\"Wavelength\", \"PeakValue\"])\n    data.sort_values(by='Sample', inplace=True)  # 排序\n    data_path = os.path.join(wks,\"A260-Max.xlsx\")\n    data.to_excel(data_path, index=False)\n    print(\"数据已保存到{}!\".format(data_path))\n\nif __name__=='__main__':\n    # 修改变量wks的值为你存放数据的目录\n    wks = r'D:\\Lab\\Data\\UV-Vis\\20201228'\n    exportMaxPeak(wks)\n```\n\n### 处理效果\n\n![image-20201228135130971](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228135130971.png)\n\n然后再基于生成的这个汇总表，把实际sample的lable以及序列填写上去，再使用`Oligo Calculator`即可计算出来样品的浓度了。\n\n![image-20201228135309897](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228135309897.png)\n\n### 使用OligoCalculator工具\n\n![image-20201228131109199](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228131109199.png)\n\nOligoCalculator工具[点此链接](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/Oligo%20caculator.exe)下载。\n\n把序列输入进去（注意去除一些修饰），然后输入紫外测得的A260峰值，点击`Caculate`即可计算。","tags":["spectrum","python","DNA"],"categories":["tools"]},{"title":"2020年最后一周","url":"/2020/12/27/theLastWeekOf2020/","content":"\n## 2020年12月27日\n\n### 半夜失眠\n\n昨晚睡得很早，可能就是九点左右吧。所以凌晨两点半起来上了个厕所，精神不错，躺在床上想了很多事情，比如实验数据怎么分析处理，课题后面怎么发展，甚至最后想到星空宇宙，反正就是没睡着，到了四点，翻来覆去还把老婆弄醒了。不过后来还是睡到七点半起床，精神上好了一些，但是身体上还是有一些不适，比较担心我的胃病复发，那滋味可不好受，所以我一有胃排空的感觉就吃东西，饼干吃完了就吃麦片。\n\n### 周末一天\n\n早上起床之后，先是洗漱，然后吃早餐，然后打扫卫生做家务，接着就出去逛天街，吃了点继光香香鸡，再走回来买点菜，就是中午十二点了。趁着老婆做饭，我把昨晚整理的code的博文发表到博客上了。吃完午饭之后，就开始睡觉，差不多两个小时，下午三点钟起来，打算做点什么。也不剩多少时间，社畜996只剩一天可以休息实在是。。。宅着也好，少出门可以减少感染新冠肺炎的风险。\n\n<img src=\"https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227183405121.png\" alt=\"image-20201227183405121\" style=\"zoom:50%;\" />\n\n晚上做了一个黄瓜鸡蛋火腿肠炒饭，滋味还不错😋。\n\n### 博客计划\n\n上周我花了不少时间在弄博客，从hexo+github pages建站，到安装stun主题，还有各种插件，最后弄了一个阿里云的图床，用很少的钱（但不少的时间），基本上完善了我想要的东西：\n\n1. 撰写方便，主要得益于typora这个markdown神器\n2. 插图方便，typora+snipaste+picgo+阿里云图床，一键截图复制粘贴自动上传到云端\n3. 访问方便，基于hexo+git可以一个命令部署网站到github-pages上，全球都可以访问\n4. 搜索方便，文章使用Front Matter中的tags和categories进行分类管理，实在不行网站上还支持多个关键词搜索\n5. 自己动手丰衣足食，无广告无审核，多样主题可选可自定义修改\n\n博客是全公开的，任何人都可以阅读我写的内容，但是我也没有安装一些主动提交到搜索引擎的插件以增加自己博客的访问量。这样做毫无意义，因为我的目的就是打造一个自己的第二大脑。之前不知道在哪位仁兄的博客里看到”技术的终点是开源“，作为一个技术型博客，自然是完全公开共享，希望能提供对大家有所帮助的东西。只是目前，我更喜欢默默无闻一点，毕竟博客里还没什么内容。\n\n虽说我是想把这个托管在github-pages的博客当作第二大脑来搞，但实际上不管是在什么平台，对于博客而言最重要的就是**持续更新独创性内容**。这跟我们发表学术论文颇为类似，不独创只转载是没有太大意义的。\n\n在我的博客中，我的内容目前主要分为`reading`、`tools`和`diary`三个categories。\n\n1. **reading**：主要是学术文献阅读或者其他方面的学习笔记\n2. **tools**：自己在数据处理分析中遇到的问题和解决方案，或者其他方面弄的能够提高工作效率的小工具代码\n3. **diary**：日志，随便写写感想、小结什么的，按日期来，一周所有内容在一个页面，是博客的主线。\n\n所以后面我会每周定期更新博客，其实就是后台运行一下deploy命令的事情。写博客终究还是给自己欣赏的，所以我刚开始费点时间把主题和插件弄好，也是值得的。\n\n## 2020年12月28日\n\n### 注意养胃和加强锻炼\n\n周六晚上失眠，半夜空腹，感觉又带起来了胃痛，今天凌晨五点半我就开始胃难受，持续十几分钟才好。这种情况，要么就是胃排空后胃液刺激胃黏膜引起的，要么就是血糖水平较低，身体不能尽快调节，也就是说我的胰高血糖素分泌有问题。总之，身体并不太健康。奥美拉错吃起来，少食多餐，多喝水，多运动。昨晚体重74.9千克，希望一年之后是65千克以下。今天我27岁，希望自己能够健健康康活到72岁。\n\n### TODO\n\n- [x] 分析实验数据\n- [x] 整理ssDNA材料并重新准确定量\n- [x] 尝试给载玻片打孔\n\n## 2020年12月29日\n\n### TODO\n\n- [ ] 继续分析实验数据\n- [ ] 文献阅读\n- [ ] 无论如何晚上九点下班健步走一小时\n\n","tags":["blog","delicacy","health"],"categories":["diary"]},{"title":"搭建阿里云OSS图床","url":"/2020/12/27/mergeAllNotes/","content":"\n我的笔记很多东西都比较零碎，这样不适合构建一个比较完整有序的笔记系统（第二大脑）。自从上手了github-pages之后，决定全面转向markdown+github，这样可以到处访问查看，为了解决插图文件大小问题，还特地购买了阿里云的对象存储服务。一系列的操作主要参考《[【Typora】typora+picgo+阿里云oss搭建图床](https://www.cnblogs.com/myworld7/p/13132549.html)》。\n\n### 购买阿里云OSS并配置图床\n\n可以直接搜索[包月的套餐](https://common-buy.aliyun.com/?spm=5176.7933691.1309819..68b22a66FQKm7f&commodityCode=ossbag&request=%7B%22region%22%3A%22china-common%22%7D#/buy)：\n\n![image-20201227162121971](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227162121971.png)\n\n我选择的是40GB，大陆通用，两年。购买之后进入控制台新建一个bucket（水桶）。\n\n![image-20201227161929457](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161929457.png)\n\n注意权限设置为公共可读，不然上传发布到github-pages上就看不到了。\n\n### 下载和配置picgo\n\ntypora支持picgo图床上传工具，直接到github上下载最新版本\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n把阿里云的Access Key以及其他信息复制填入配置选项即可：\n\n![image-20201227161730671](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161730671.png)\n\n### 配置typora\n\n![image-20201227161535243](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161535243.png)\n\n到这一步，就可以开心的在本地使用typora写markdown，截图使用`snipaste`，直接复制粘贴过来就开始上传到自己的图床。不过第一张图片会先打开picgo程序，所以稍微慢一点。\n\n> 想想我之前还写了一个python脚本缩小图片大小，现在完全没有这个必要了，啊哈哈哈哈！","categories":["tools"]},{"title":"使用python提取txt文本中关键信息并汇总到表格","url":"/2020/12/26/collectFilesUsingPython/","content":"\n使用python处理文件、文件夹和路径之类的事情，主要是用到`os`、`glob`、`re`和`shutil`等模块。\n\n### 批量创建子目录\n\n在处理数据的时候，不可避免地会涉及到各种文件的批量处理。比如我在处理和分析数据的时候，需要根据单个原始数据创建子目录用于存放后续分析产生的各种中间数据。所以我写了下面这段代码：\n\n```python\nimport os\nfrom glob import glob\n\ndef makeSubdirectory(wks):\n    '''\n    wks: 某次DNA-PAINT实验存放lif文件的目录\n    此程序会对lif文件自动新建同名子目录\n    '''\n    lifs = glob(os.path.join(wks, \"*.lif\"))\n    for lif in lifs:\n        filepath, ext = os.path.splitext(lif)  \n        # 分离文件的拓展名和其他路径，比字符串split('.')更安全\n        try:\n            os.mkdir(filepath+'/')\n        except:\n            print('Subdirectory Existed! -- %s'%(filepath))\n    print('Job Finished!')\n\nif __name__ == \"__main__\":\n    wks = r\"E:\\xxd\\TIRF-LeicaDMi8\\20201221\" \n    makeSubdirectory(wks)\n```\n\n需要注意的是：\n\n1. `os.mkdir`命令如果是路径已经存在就会报错\n2. glob中可以使用`*`作为通配符匹配所有后缀为`lif`的原始数据文件，返回一个list\n3. `os.path.splitext`可以把文件路径的后缀跟名字分开\n4. `try ... except ...` 可以有效处理程序运行中的异常情况\n\n### 从txt文件中收集图像参数\n\nlif文件是leica显微镜产生的数据，可以使用ImageJ打开，然后保存为tif，方便后面的处理。此时，图像的一些相关信息可以在ImageJ中查看，比如激光强度、每帧间隔时间等。然后Info还可以保存为txt文件。为了方便，我写了一个自动化脚本，收集Info文件中的重要参数并汇总到一个excel表格中。代码如下：\n\n```python\nimport os\nfrom glob import glob\nimport pandas as pd \nimport re \n\ndef findTxt(wks):\n    infos = []\n    for d in os.walk(wks):\n        path, dirs, files = d\n        for f in files:\n            if f.startswith('Info') and f.endswith('txt'):\n                # 根据文件命名特征进行筛选\n                txt = os.path.join(path,f)\n                infos.append(txt)\n    return infos\n\ndef extractInfo(txt):\n    '''\n    txt: Info for **.txt的文件路径\n    ==============================\n    从txt中提取以下关键信息：\n    1. **激光强度**：WFLaserChannelInfo_CurrentValue = 100\n    2. 穿透深度：TIRF_PenetrationDepth = 171.008186233857\n    3. 激光波长：WFLaserChannelInfo_Wavelength = 638\n    4. 相机温度：ATLCameraSettingDefinition|TargetTemperature = -75\n    5. **每帧间隔时间**：Frame interval: 0.02046 sec\n    '''\n    recs = {'WFLaserChannelInfo_CurrentValue = ':0, \n           'TIRF_PenetrationDepth = ':0, \n           'WFLaserChannelInfo_Wavelength = ':0,\n           'TargetTemperature = ':0,\n           'Frame interval:':0}\n    # 避免构造复杂的pattern正则表达式，把复杂的写入key\n    with open(txt) as f:\n        data = f.read()\n    \n    for key in recs:\n        pattern = '{}(.+)'.format(key)\n#         print(pattern)\n        a = re.search(pattern, data)\n        r = a.group(1)\n        if r.endswith('sec'):\n            r = r.split(' ')[1]\n        recs[key] = float(r)\n    return recs\n\ndef main(wks):\n    infos = findTxt(wks)\n    newkeys = ['ExIntensity', 'PenetrationDepth','ExWavelength','ccdTemperature','frameInterval']\n    data = {x:[] for x in newkeys}\n    for txt in infos:\n        recs = extractInfo(txt)\n        # 字典的键名修改，使用pop方法\n        keys = list(recs.keys())\n    #     print(keys)\n        for newkey, oldkey in zip(newkeys, keys):\n            data[newkey].append(recs[oldkey])\n    data = pd.DataFrame(data)\n    data['filepath'] = infos\n    data.to_excel(os.path.join(wks, 'infos.xlsx'), index=None)\n\nif __name__ == \"__main__\":\n    wks = r\"E:\\xxd\\TIRF-LeicaDMi8\\20201223\" \n    main(wks)\n```\n\n代码稍微长了一点，还弄出来两个函数。寻找Info文件还好说，因为文件命名都带有Info前缀，然后文件又是txt类型，直接利用`os.walk`获取总的工作目录下所有的文件，然后遍历，根据文件名进行筛选即可。注意`os.walk`返回的是一个迭代器，每次吐出来一个根目录路径，根目录下文件夹列表以及文件列表组成的三元元组。\n\n从`Info.txt`中提取信息还颇为费事，因为Info中信息量非常大，我不可能用`f.readlines()`的方法去读取指定的行，所以选择了用正则匹配的方式。但是正则我用得很少，而且为了减轻正则pattern的设计难度，我把pattern中变化的部分尽可能地定义到字典的key中。我觉得这个思路（拿通用性换效率）还挺不错的——能把事情解决就好。re模块中我常用search和findall两个功能。需要注意的是：\n\n1. re.search只返回找到的第一个匹配的字符串\n2. re.findall返回所有匹配的字符串所组成的list\n3. 如果pattern中放括号，括号可以作为group提取信息，但是注意group的索引id\n4. 修改字典的键名的方法\n5. 使用pandas模块，构建dataframe，然后方便保存为excel可以打开的xlsx文件\n\n实现效果如下：\n\n![image-20201227120627018](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227120627018.png)\n\n\n\n","tags":["python"],"categories":["tools"]},{"title":"批量缩小博客中的图片","url":"/2020/12/24/resizeImages/","content":"\n目前我最熟悉[python](https://www.liaoxuefeng.com/wiki/1016959663602400)，另外也会写一点[ImageJ的脚本处理](https://zhuanlan.zhihu.com/p/60999196)和分析图像。可是编程技能“用进废退”，特别是人年纪越大，对于各种繁复的代码细节就越难记忆。所以很多码农都会写博客，并且把博客当作“第二大脑”。我当然也不例外，以后也时不时会把自己写过的代码整理到博客上。\n\n### 需求\n\n我喜欢在文章中插入截图，实现图文并茂的效果。但是github的仓库容量有限，而且图片大小尺寸不一造成不美观。虽然可以定义`css`文件来控制显示，但它只能解决美观问题。而使用图床能够避免图片太多超出仓库容量限制，但把各种图片放到公共图床上既不能让我放心，也跟我目前的workflow不兼容。所以我决定写一个小的工具代码，实现对插图文件的resize。具体有以下需求：\n\n1. 支持对png, jpg, jpeg等常见图像的resize\n2. 已经resize的不要进行重复的操作\n3. 原始大图要保留而且方便查找\n4. 不破坏markdown中对图片的引用\n\n### 代码\n\n代码要点如下：\n\n1. 使用glob批量读取多种格式的图片地址到列表\n2. 过滤已经被resize处理的图片\n3. pillow库中的resize方法的调用\n\n废话不多说，直接上代码：\n\n```python\nfrom PIL import Image \nimport os \nfrom glob import glob\n\ndef resizeImages(wks):\n    '''\n    输入makrdown附件目录地址，\n    对其中所有png\\jpg\\jpeg等格式的图像进行缩小，\n    固定宽度到600，\n    原图被重命名带`_large.*`后缀\n    如果有带此后缀的，则两张图像都不进行处理\n    '''\n    files = []\n    formats = ['png','jpg','jpeg']\n    # 如果想压缩gif，请参考\n    # https://blog.csdn.net/huanyue6660/article/details/79423326\n    for ext in formats:\n        files.extend(glob(os.path.join(wks, '*.{}'.format(ext))))  # 使用extend的方式合并新增的list\n    \n    jobs = []\n    for f in files:\n        ext = os.path.splitext(f)[-1]\n        if (f+'_large%s'%(ext) in files) or (f.endswith('large%s'%(ext))):\n            continue\n        else:\n            jobs.append(f)\n\n    for job in jobs:\n        ext = os.path.splitext(job)[-1]  # 获取文件后缀名，注意这个带点\n        a = Image.open(job)\n        a.save(job+'_large{}'.format(ext))\n        w, h = a.size\n        if w>600:\n            # 只缩小大图\n            b = a.resize(size=(600, int(h*600/w))) # 注意size得是整数\n        else:\n            b = a\n        b.save(job)\n        print('{} resized to width = 600 px!'.format(job))\n\nif __name__ == \"__main__\":\n    wks = r\"D:\\hexo\\blog\\source\\_posts\"  # windows系统文件路径，注意不要去掉r\n    subdirs = glob(os.path.join(wks,\"*/\"))\n    # print(subdirs)\n    # 对_posts目录下所有图片进行处理\n    for subdir in subdirs:\n        resizeImages(subdir)\n```\n\n### 使用\n\n我喜欢把这种高复用的小工具代码做好接口，写到python脚本中，然后用配置好的vscode打开，根据需求修改参数（这里是`_posts`目录的地址），然后按`Ctrl+F5`运行。\n\n### 结果\n\n![image-20201224114927774](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201224114927774.png)\n\n原始图像被重名为带`_large`后缀的文件。","tags":["python","图像处理"],"categories":["tools"]},{"title":"单分子定位超分辨成像数据分析","url":"/2020/12/23/SMLMpostProcessing/","content":"\n最近在尝试DNA-PAINT相关的课题，遇到了不少问题。DNA-PAINT属于单分子定位超分辨成像（SMLM）的一种，而要想拿到质量好的超分辨结果，在**样品制备**、**仪器状态**、**拍摄参数**和**数据后处理**等四个方面都有很高的要求。\n\n目前我主要参考DNA-PAINT的泰斗[Ralf Jungmann的相关工作](http://www.nature.com/articles/nprot.2017.024)开展课题，但是不得不承认上述四个方面，我们跟人家还有很大的差距，以至于蹉跎数月，还不能稳定地产出好的结果。所以，即便超分辨领域拿诺贝尔奖已经多年，但这仍然是一门手艺活儿。\n\n在单分子定位数据后续分析方面，我也主要沿用[picasso软件](https://github.com/jungmannlab/picasso)，虽然latest version在我的电脑上有诸多版本兼容性问题，但我还是通过自己写小工具代码的方式，基本上能够实现完整的PAINT相关的统计指标量的获取。\n\nDNA-PAINT从属于SMLM，可能前期样本制备和数据采集上跟其他方法有所差异，但最后得到的raw数据基本上是一致的——它本质上是一个movie。所以SMLM的数据分析方法，具有较高的通用性，因此在这个方面，也有不少文章出来。\n\n### 利用贝叶斯方法分析单分子结合事件\n\n单分子可逆结合到界面上，它的结合和解离动力学，以及结合了多少个分子，这些东西都需要从`Intensity-Time Curves`中统计分析出来。我之前尝试过使用隐马尔可夫模型来分析过荧光淬灭的台阶曲线，但感觉几个概率矩阵的参数难调。而贝叶斯估计，虽然我目前还不大懂，但有一篇工作《[An automated Bayesian pipeline for rapid analysis of single-molecule binding data](http://www.nature.com/articles/s41467-018-08045-5)》做得还不错。可以看到它通过这种分析方法，能够把有很多毛刺的曲线的状态分类表示出来：\n\n![image-20201223115958200](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201223115958200.png)\n\n除了贝叶斯，最大似然估计和隐马尔可夫的方法都有看到过报道，后面再进行补充把！\n\n### 超分辨成像结果中的模式识别\n\n一般来说，细胞内有功能的蛋白复合体具有一致的微观结构，表现出来某种pattern。当这些结构分布密集，而且还多色混合在一起，人眼是很难分辨的。所以这种模式识别也具有重要的意义。\n\n![image-20201223120508029](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201223120508029.png)\n\n《[Ultrafast data mining of molecular assemblies in multiplexed high-density super-resolution images](http://www.nature.com/articles/s41467-018-08048-2)》这篇文章就利用算法实现密集图像中比较简单的模式识别，我觉得这个方法在我的研究领域经常能用到，而且不仅仅局限于SMLM的超分辨数据，比如一些透射电子显微镜或者原子力显微镜的结果都可用。\n\n另外前一阵子《Nano Letters》杂志上也有一篇文章《[Nanoscale Pattern Extraction from Relative Positions of Sparse 3D Localizations](https://pubs.acs.org/doi/10.1021/acs.nanolett.0c03332)》涉及到模式的识别与提取，不过相对来说实现的方法可能比较low：\n\n![image-20201223120931550](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201223120931550.png)\n\n这种方法基于圆环结构pattern，自己提出了一个Rotational symmetry models，然后（我估计是用模拟数据，文章还没细看😂）进行拟合训练，参数调好之后，就拿去对raw data进行处理。感觉有点类似炼丹术。","tags":["SMLM"],"categories":["reading"]},{"title":"文献阅读-20201222","url":"/2020/12/22/read-20201222/","content":"\n掌握行业内最新动态非常重要，这样一来可以开阔视野获得灵感，二来能够避免自己做很多无用功，所以**文献阅读是做学术研究的第一要事**。我主要用 mendeley 软件进行文献管理，好处虽然很多，但毕竟还是工具。要想真正消化海量文献，除了在 paper 上零碎的 mark，更多是需要思考归纳总结。\n\n<!-- more -->\n\n### protein nanoparticle\n\n基于蛋白质或者多肽链组装的纳米颗粒，自然界典型的就是病毒。如果拿DNA、RNA和多肽相比较，感觉DNA纳米结构是很容易搞的，RNA很容易被降解，而多肽可能组装不是很好控制。《Cell》上有文开发了一种基于protein nanoparticle的新冠病毒疫苗[^1]。这篇文章的作图配色不错。\n\n![image-20201222094915030](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201222094915030.png)\n\n之前还有《JACS》上介绍protein nanocage以及peptide自组装之类的工作[^2]，我觉得还挺有意思的，如果什么时候能够像DNA一样更加容易控制设计于合成，就非常好了。甚至更早的用protein nanocage作为DNA protocell的外壳的工作[^3]，说明这种基于蛋白的纳米颗粒已经越来越多的被使用了。\n\n[^1]: https://linkinghub.elsevier.com/retrieve/pii/S0092867420314501\n[^2]: https://pubs.acs.org/doi/10.1021/jacs.0c07285\n[^3]: http://www.nature.com/articles/s41565-019-0399-9\n\n### DNA polymer/protocell/droplet\n\n想不到很好的名字概括，就是DNA作为类似高分子做了一个毛线球一样，主要是`Andreas Walther`作为通讯作者的一系列工作（[实验室网站](https://www.walther-group.com/research)）。上一次文献大组会的时候我讲过一篇他们发表在《Chem》上的基于DNA的相分离（Liquid-Liquid Phase Seperation）的工作[^4]，后来YGB师兄跟我分享了这个人其它一些非常类似的东西，特别是同期一篇在《Nature Communications》上的也是用ATP驱动做self-sorting的组装体的工作[^5]。\n\n![image-20201222095009157](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201222095009157.png)\n\n[^4]: https://linkinghub.elsevier.com/retrieve/pii/S2451929420304861\n[^5]: http://www.nature.com/articles/s41467-020-17479-9","tags":["paper"],"categories":["reading"]},{"title":"在gitub-pages搭建Hexo博客","url":"/2020/12/20/setupHexoWebsite/","content":"\n\n我打算用**hexo**结合**github pages**构建一个轻博客网站，每周发表至少一篇博文。\n\n<!-- more -->\n\n### Hexo建站参考教程\n\n使用hexo建站到**github pages**的完整教程推荐如下：\n\nhttps://zhuanlan.zhihu.com/p/78467553\n\nhttps://segmentfault.com/a/1190000017986794\n\nhttps://theme-stun.github.io/docs/zh-CN/\n\nhttps://hexo.io/zh-cn/index.html\n\nhttps://blog.csdn.net/hhgggggg/article/details/77853665\n\n### 使用**Stun**主题\n\n[stun主题](https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E5%AE%89%E8%A3%85)比较好看，我还稍微配置了一下可以[跟typora连用](https://www.cnblogs.com/caoayu/articles/13855081.html)（主要是为了能够正常显示插图和附件）。效果如下图：\n\n![image-20201222100030247](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201222100030247.png)\n\n### 需要安装的插件列表\n\n1. git相关插件，用于deploy到github pages上\n2. search相关插件，方便对站内内容进行搜索\n3. asset-imager相关插件，方便插图附件之类的\n\n### 开启评论系统\n\ngitalk插件是利用github仓库的issue功能，为了节约空间，我另外开了一个**sea-comments**的仓库作为存储。然后照着以下教程进行操作：\n\nhttps://www.jianshu.com/p/4242bb065550\n\nhttps://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#gitalk\n\nhttps://github.com/gitalk/gitalk\n\n需要注意的是，stun主题已经嵌入了gitalk，只要到stun主题下的`_config.yaml`下添加自己评论仓库的一些信息即可。\n\n> gitalk会出现Error Network报错，弃用~，之后使用`valine`，评论数据存储在`LeanCloud`中，如有必要，及时备份。\n>\n> https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#valine\n\n### 常用命令\n\n需要进入到hexo网站的本地根目录下执行命令，以windows系统为例：\n\n1. `hexo clean && hexo g && hexo s`: 若修改了**_config.yaml**配置文件，需要清除 public目录下所有内容，然后根据新的配置文件重新生成静态网页，并且启动本地服务器\n2. `hexo clean && hexo d`：修改配置后，重新发布到gitee pages上。\n\n### 注意事项\n\n1. 尽量使用`hexo new`命令生成 pages或者新的markdown文件，然后到`_posts`目录下对markdown文件进行编辑修改（使用typora）。\n2. markdown文件命名只能为英文或者数字，而标题可以在markdown文件里边的**Front Matter YAML**中进行设定（**Front Matter YAML设定非常重要**，参考[链接](https://hexo.io/zh-cn/docs/front-matter)）。\n3. github仓库容量有限（< 1 GB），长期使用个人博客，注意不要插入太多太大的图片，建议是一篇博文图片不超过10张。\n4. 博客内容完全公开，注意不要发布违法或者引发舆论的内容，并注意保护个人隐私。","tags":["hexo"],"categories":["tools"]}]