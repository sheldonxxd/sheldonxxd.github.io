[{"title":"简化版FRET分析","url":"/2021/01/12/simpleFRETanalysis/","content":"\n脚本使用方法详见代码内注释，需要注意的是，要根据实验室具体仪器参数设置好光子数转换的相关参数。\n\n- EM_Gain = 500;  // 拍摄时设置的参数\n- Offset = 204;  // 相机内置\n- Sensitivity = 16.9;  // 相机内置\n- QE = 0.9;  //相机内置，也与荧光染料相关\n\n```javascript\n/**\n * Author: Xiaodong Xie\n * Date: 2021/1/12\n * Email: sheldon_sinap@163.com\n * Function：此ImageJ脚本专用于简易的荧光FRET分析\n * \n * ## 使用步骤  \n * 1. 分别将相同视野采集的donor和receptor两个通道的图像用ImageJ打开\n * 2. 右键点击图像进行rename，修改图像名称为donor或者receptor并且保存为tif\n * 3. 使用\"Process > Find Maxima...\"功能分别对donor和recoptor进行预览，获取合适的 prominence 参数（h）\n * 4. 在此脚本中修改对应的 prominence 参数\n * 5. 点击run运行此脚本\n * 6. 手动保存程序计算Results到csv文件\n * \n */\nrequires(\"1.53c\");\n\n// photon conversion参数\nEM_Gain = 500;  // 拍摄时设置的参数\nOffset = 204;  // 相机内置\nSensitivity = 16.9;  // 相机内置\nQE = 0.9;  //相机内置，也与荧光染料相关\n\n // 在此修改donor和receptor的prominence参数\n h_donor = 250;\n h_receptor = 250;\n\n // 运行主体过程 ===\n donor = \"donor.tif\";\n receptor = \"receptor.tif\";\n selectWindow(receptor);\n selectWindow(donor);  \n// 选择窗口，如果没有rename会报错提示并终止程序\n\n\n// 下面的方式更加方便无需再额外自定义函数\nselectWindow(donor);\nrun(\"Find Maxima...\", \"prominence=\"+h_donor+\" output=[Single Points]\");\nselectWindow(receptor);\nrun(\"Find Maxima...\", \"prominence=\"+h_receptor+\" output=[Single Points]\");\nrun(\"Merge Channels...\", \"c1=[\"+receptor+\" Maxima] c2=[\"+donor+\" Maxima] create\");\nrun(\"RGB Color\");\nrun(\"8-bit\");\n// 对merge之后的locations再进行find maxima\nlocations = pFinder(10);  \nselectWindow(\"Composite\");\nclose();\nselectWindow(\"Composite (RGB)\");\nclose();\n\n\n N = lengthOf(locations)/2;\n for(i=0;i<N;i++){\n     x = locations[2*i];\n     y = locations[2*i+1];\n     selectWindow(donor);\n     value_donor = getPixel(x,y);\n     selectWindow(receptor);\n     value_receptor = getPixel(x,y);\n     ratio = (value_receptor)/(value_donor+value_receptor);  // 自定义比值计算公式\n     n_donor = getPhotonNumber(value_donor, EM_Gain, Offset, Sensitivity, QE);\n     n_receptor = getPhotonNumber(value_receptor, EM_Gain, Offset, Sensitivity, QE);\n     n_ratio = n_receptor/(n_donor+n_receptor);  // 自定义比值计算公式\n     setResult(\"X\", i, x);\n     setResult(\"Y\", i, y);\n     setResult(\"value_donor\", i, value_donor);\n     setResult(\"value_receptor\", i, value_receptor);\n     setResult(\"value_ratio\", i, ratio);\n     setResult(\"photon_num_donor\", i, n_donor);\n     setResult(\"photon_num_receptor\", i, n_receptor);\n     setResult(\"photon_num_ratio\", i, n_ratio);\n }\n updateResults();  //刷新Results窗口显示收集到的数据\n selectWindow(\"Results\");   //请自行保存数据表格\n\n// 自定义函数 ===\nfunction pFinder(h){\n    // find all particles by bultin ImageJ function and return their locations\n    run(\"Find Maxima...\", \"prominence=\"+h+\" strict output=[List]\");\n    selectWindow(\"Results\");\n    locs = newArray(2*nResults);\n    for(i=0;i<nResults;i++){\n        locs[2*i]=getResult(\"X\",i);\n        locs[2*i+1]=getResult(\"Y\",i);\n    }\n    run(\"Close\");\n    return locs;\n}\n\nfunction getPhotonNumber(value, EM_Gain, Offset, Sensitivity, QE){\n    // 根据EMCCD的灰度值计算实际光子数\n    p_number = (value-Offset)*Sensitivity/EM_Gain/QE;\n    return p_number;\n}\n```\n\n","categories":["ImageJ"]},{"title":"集成typora和hexo","url":"/2021/01/10/GUIforLog/","content":"\n想打造一个开机自启动的小工具，然后想写一篇markdown笔记，直接create，就自动在网站的`_posts`目录下创建好文件，并且调用typora打开。\n\n### 把typora加入到系统环境变量\n\n![image-20210109154449024](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210109154449024.png)\n\n先用`Everything`搜索一下`typora.exe`所在的位置\n\n![image-20210109154604826](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210109154604826.png)\n\n设置好之后，直接在命令行中就输入`typora`就可以打开这个程序。如果typora后面跟了markdown文件路径，就可以直接打开这个文件。\n\n![image-20210109154824658](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210109154824658.png)\n\n### 使用python集成过程\n\n集成这一系列过程，就是把各种命令行操作简化为一两个按钮。具体代码如下：\n\n```python\nimport os\nimport webbrowser\nimport PySimpleGUI as sg\nimport subprocess\n\nclass xxd:\n    '''\n    集成typora和hexo的一个小工具\n    可以实现本地轻松创建markdown \n    然后自动部署hexo网站\n    '''\n    def __init__(self, root_dir):\n        '''\n        root_dir: hexo站点所在根目录路径 \n        如： \"D:\\hexo\\blog\"\n        '''\n        self.dir = root_dir\n        # self.disk = self.dir[:2]  # 取盘符\n        self._posts = self.dir+'/source/_posts/'\n        self.p = []  # 存放子进程\n        os.chdir(self.dir)\n    \n    def newPost(self, filename):\n        '''\n        filename: markdown文件名，\n        英文或数字组合\n        '''\n        os.system(f'hexo new {filename}')\n        self.filepath = os.path.join(self._posts, filename+'.md')\n    \n    def typora(self):\n        '''\n        用typora打开新建的markdown文件\n        typora.exe需要被添加进入环境变量\n        '''\n        command = ['typora', self.filepath]\n        self.p.append(subprocess.Popen(command))\n    \n    def depoly(self):\n        os.system(f'hexo g && hexo d')\n\n\ndef the_gui(root_dir, site_url):\n    # 初始化wiki对象\n    job = xxd(root_dir)\n\n    sg.theme('LightGrey3')\n    font = ('Arial', '11')\n\n    layout = [[sg.InputText(key='filename', size=(22, 1), font=('Arial', 16)),],\n              [sg.Button('Create', font=font), \n               sg.Button('Website', font=font), \n               sg.Button('Folder', font=font), \n               sg.Button('Depoly', font=font)],\n              ]\n    window = sg.Window('Log Tool', layout)\n\n    while True: \n        event, values = window.read()\n        if event is sg.WIN_CLOSED:\n            if len(job.p)>0:\n                for p in job.p:\n                    p.kill()\n            break\n        elif event == 'Create':\n            filename = values['filename']\n            if len(filename)>3:\n                job.newPost(filename)\n                job.typora()\n        elif event == 'Website':\n            webbrowser.open(site_url)\n        elif event == 'Folder':\n            os.startfile(job._posts)\n        elif event == 'Depoly':\n            job.depoly()\n    window.close()\n\nif __name__ == \"__main__\":\n    root_dir = r\"D:\\hexo\\blog\"\n    site_url = 'https://sheldonxxd.github.io/'\n    the_gui(root_dir, site_url)\n```\n\n需要注意的是，有些命令我调用的`os.system`，有一些则使用的`subprocess.Popen`，主要是防止阻塞。\n\n然后用户要自己定义好网站的root_dir，以及site_url。\n\n### 用户界面效果\n\n非常简单的甚至可以说丑陋的用户界面：\n\n![image-20210110060145381](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210110060145381.png)\n\n使用方法非常简单：\n\n1. 文本框中输入markdown的文件名filename，不用带后缀，然后点击`Create`，后台就会执行`hexo new filename`命令，创建一个新的markdown，并自动调用typora打开这个新建的文档\n2. 点击`Website`可以直达你的github pages\n3. 点击`Folder`可以直接打开`_posts`文件夹，方便对之前的markdown做修改\n4. 点击`Depoly`相当于`hexo g && hexo d`，生成新的内容并部署到github pages","tags":["gui","typora"],"categories":["python","blog"]},{"title":"二值化序列间隔长度统计","url":"/2021/01/07/BinarySequenceIntervalCount/","content":"\n假如有一个对象，能够随机闪烁发光，产生一段脉冲信号被检测器收集到。现在把信号强度分成high和low两类，分别用1（ON）和0（OFF）表示。接下来需要统计在这段信号序列中，1和0持续片段的长度。而且考虑仪器噪声波动，需要设置gap参数。\n\n### 样本说明\n\n比如对于序列`a`，信号作图显示如下：\n\n![image-20210107121859054](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210107121859054.png)\n\n其信号值如下：\n\n```\n0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1\n```\n\n当gap=0时，返回值为：\n\nON = [1, 3, 2, 3, 3]\n\nOFF = [5, 1, 4, 6, 2]\n\n当gap=1时，返回值为：\n\nON = [5, 2, 3, 3]\n\nOFF = [5, 4, 6, 2]\n\n……\n\n检验结果的时候，ON和OFF求和等于序列的长度，而且gap=1时，OFF中不会出现小于等于gap的数。\n\n### xxd的analyze算法\n\n此算法非常简单，但是只能统计gap=0的情况。\n\n```python\ndef analyze(labels):\n    '''\n    labels是ndarray, 里面好多True和Fasle值\n    True代表ON, False代表OFF\n    实现对状态持续时间的统计\n    '''\n    darks = []\n    ons = []\n    b, d = 0, 0\n    for idx, status in enumerate(labels):\n        if status>0:\n            b += 1\n            if d>0:\n                darks.append(d)\n            d = 0            \n        else:\n            d += 1\n            if b>0:\n                ons.append(b)\n            b = 0\n    ## 循环结束后最后一段要进行收集    \n    if d>0:\n        darks.append(d)\n    else:\n        ons.append(b)\n    # 返回on或者dark time的均值\n    return ons, darks\n```\n\n测试结果如下：\n\n![image-20210107122525529](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210107122525529.png)\n\n### hwj的bi_count算法\n\n此算法逻辑略为复杂，但是能统计gap>0的情况。\n\n```python\ndef bi_count(a, gap=1):\n    '''\n    Author: Wenjuan HU\n    Date: 2021-01-07\n    '''\n    count_0, count_1 = 0, 0\n    list_0 = []\n    list_1 = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            count_0 += 1\n            if count_0 > gap and count_1 >0 :\n                list_1.append(count_1)\n                count_1 = 0\n        elif a[i] == 1:\n            count_1 += 1\n            if count_0 > gap:\n                list_0.append(count_0)\n                count_0 = 0\n            else:\n                count_1 += count_0\n                count_0 = 0\n    if count_0 > gap:\n        list_0.append(count_0)\n    else:\n        list_1[-1] = list_1[-1]+count_0\n    if count_1 > 0:\n        list_1.append(count_1)\n    return list_0, list_1\n```\n\n测试结果如下：\n\n![image-20210107122606314](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210107122606314.png)\n\n### 小结\n\n这是一个编程能力测试的好case，反正我是做不出来的弱鸡（if...else一多就懵逼），所以必须向强大的hwj女士致敬！！！","tags":["algorithm"],"categories":["python"]},{"title":"安装和设置HP网络打印机","url":"/2021/01/06/installPrinter/","content":"\n实验室打印机还是有的，不过平时我主要在电脑上看文献，所以使用的频率非常低。恰巧今天要提交一些纸质材料，不得不打印出来。一问，大家都是抱着自己的笔记本电脑，跟打印机通过usb连接再打印文件的。而我的电脑同时连着两个硬盘，各种程序（处理硬盘中的实验数据）和文件都还打开着。所以**搬电脑**这种事情我可干不来。\n\n为了方便自己方便大家，我便把打印机连接到了基于自己的路由器架设的无线局域网中（printer无法连单位的企业WiFi）。然后在路由器中还给它分配了固定IP：\n\n![image-20210106100103687](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106100103687.png)\n\n接下来就是给自己的电脑安装驱动，并且连接这台网络打印机。为此，我还写了一个教程。\n\n### 安装打印机驱动\n\n建议使用windows系统，macOS或linux需要下载对应的驱动程序。\n\n先安装版本型号匹配的打印机驱动：\n\n![image-20210106083943008](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106083943008.png)\n\n在安装界面中，需要连接到网络打印机，我已经设置好网络，大家务必先连接到`_gitlab_`这个WiFi，密码是`fan123456`。**注意此WiFi为局域网，不能访问公网，**但可以访问内部gitlab网站（http://192.168.0.80）\n\n> 夹带了私货。gitlab是我架设在一台ubuntu主机上的东东，我觉得对于实验室内部而言，有这么一个协同和版本控制的工具还蛮好的。\n\n![image-20210106084204281](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106084204281.png)\n\n然后在驱动安装界面输入打印机的IP地址`192.168.0.188`\n\n![image-20210106084251923](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106084251923.png)\n\n马上就能搜索到这台打印机的信息，点击下一步继续安装和配置（需要一点时间）。\n\n![image-20210106084320075](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106084320075.png)\n\n最后显示打印机安装成功界面：\n\n![image-20210106084722170](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106084722170.png)\n\n直接点击`完成`，并打印测试页。如果没有成功，请检查您的系统是否自动断开了没有网络连接的`_gitlab_`的WiFi。\n\n### 设置双面打印\n\n具体参考《[惠普打印机双面打印自动变手动的解决办法](https://www.jb51.net/hardware/other/313421.html)》，对打印机的属性进行修改：\n\n![image-20210106085902856](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106085902856.png)\n\n然后修改打印机首选项，为了经济环保，默认双面打印：\n\n![image-20210106090109404](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106090109404.png)\n\n### Word文档打印效果\n\n然后随便打印一个word文档，按`Ctrl+P`，可以看到打印机默认配置就是双面打印了：\n\n![image-20210106090248311](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106090248311.png)\n\n### 小结\n\n然后我把教程发布到微信群，让大家打印东西能够方便一点，获得点赞不计其数，那我也感觉蛮开心的。\n\n![image-20210106100712376](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210106100712376.png)\n\n安装配置网络打印机这种事情，其实非常简单。但是它能够服务到的人也是最多的。而我写的可能自鸣得意的代码，反倒是无人问津最多我老婆喊666。当然了我也并不追求多人问津，能自鸣得意自娱自乐也是不错的。关键是说一定要抓住真正的需求（不管是自己的还是客户的），才能做出创造大量价值的事情，从而获得满足感和幸福感。","tags":["打印机","需求"],"categories":["blog"]},{"title":"获取直方分布是如此的简单","url":"/2021/01/05/easy-histogram/","content":"\n查看一列数据的直方分布是统计里边最基本的操作了，过去我常常使用seaborn作直方分布图，它会进行自动的核密度估计，但是我当我想拿到一个简单的histogram的数据的时候，常常还需要自己使用`collections.Counter`先来计数一下。直到今天，我使用`plt.hist`命令偷懒，发现了一些端倪：\n\n![image-20210105192718893](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105192718893.png)\n\n注意，jupyter notebook 中output的内容，除了有figure之外，还有一个tuple，看上去`plt.hist`命令可以返回直方分布柱状图的作图数据。如果勤快点加上`plt.show`，就看不到了：\n\n![image-20210105192912328](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105192912328.png)\n\n### plt.hist的返回值就是直方分布统计数据\n\n不过我还是用一个变量接收了`plt.hist`命令的返回，轻而易举就拿到了直方分布的统计数据，后续自己想怎么作图就怎么作图：\n\n![image-20210105193018138](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105193018138.png)\n\n### 通过bins和range参数控制直方分布统计\n\n不过你可能注意到，直方分布的分组边界是凌乱的。这个时候可以通过设置bins和range参数来控制：\n\n![image-20210105193503927](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105193503927.png)\n\n### 直接把频次换算成分布概率密度\n\n通过`?plt.hist`可以在jupyter notebook中快速查看该函数的文档，立马得知可以通过density这个参数，选择输出分布密度，相当于做了一个归一化，使得不同数量的样本之间具备更好的可比性。\n\n![image-20210105193937326](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105193937326.png)\n\n### 查看累积频率\n\n![image-20210105194511640](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105194511640.png)\n\n只要在参数里边修改cumulative为`True`，就可以输出一个累积频率分布。这比我这两天类似累活可要轻松多了。\n\n### 绘制帕累托图\n\n然后我想把累积频率绘制成折线，下边放分布，结果如下：\n\n![image-20210105194913469](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105194913469.png)\n\n需要注意的是，a是前边`plt.hist`命令的返回值，索引为1才对应横坐标，而且`len(a[1])` 比` len(a[0])` 大 1，因为`a[1]` 存放的是边界，所以我对这个array进行了切片，而且还移位。\n\n### 小结\n\n我再也不用Counter了，再也不用dataframe的`.cumsum()`了，使用plt.hist不能再方便。感觉像是打通了任督二脉。matplotlib这个库确实是🐂🍺！","tags":["histogram","matplotlib"],"categories":["python"]},{"title":"我为何从ImageJ转向python","url":"/2021/01/05/myCodingHistory/","content":"\nImageJ是学术界非常常用的图像处理软件。它插件丰富，功能强大，体积小巧，开源跨平台，我在读博士刚开始的时候，主要就是用它解决一些成像数据分析的问题。可是到后来，需要处理的数据量越来越大，对自动化的需求越来越高，ImageJ的宏语言（Macro Language）已经无法满足需求，我便逐步迈入了python的深坑。下面举一个例子，作为我这种转型的见证。\n\n### 需求\n\n有一个视频数据（xyt），每一帧都有一些单分子荧光信号，需要提取它们的位置（xp, yp），然后再提取该位置的强度时间曲线进行分析。\n\n### ImageJ Macro的代码实现\n\n```javascript\n/*\n * 2021-1-4\n * # batch find maxima and export the list\n */\n\n h = 750;  // 先自行用Find Maxima调节参数预览一下，选择合适的数值\n\n // 把记录文件存放子目录下，\n // 如果子文件夹不存在，创建一个\n image= getTitle();\n imageName = split(image, \".\");\n fpath = getDirectory(\"image\")+imageName[0]+\"_frames/\";\n if (!File.exists(fpath)){\n \tFile.makeDirectory(fpath);\n }  \n \n N = nSlices;\n setBatchMode(\"hide\");  // 使用batchmode稍微快一点\n for (i = 0; i < N; i++) {\n \t// main(fpath, i);\n \tmain2(i);\n }\n setBatchMode(\"show\");\n\n roiManager(\"save\", fpath+\"RoiSet.zip\");\n // 把roi管理器中的记录打包保存\n // 后续可以使用python中的read_roi模块进行处理\n\n function main(fpath, i){\n \t// 对每一帧进行Find Maxima处理，\n \t// 输出List到Results窗口\n \t// 把Results窗口内容保存为csv，命名为frame/id.csv\n \tframeID = i+1;\n \tsetSlice(frameID);\n \trun(\"Find Maxima...\", \"prominence=750 output=List\");\n \tsaveAs(\"results\", fpath+frameID+\".csv\");\n// \tselectWindow(\"Results\");\n// \trun(\"Close\");\n//  不用关，每次都会刷新Results窗口\n }\n\n function main2(i){\n \t// 对每一帧进行Find Maxima处理，\n \t// 输出List到Results窗口\n \t// 把Results窗口内容保存为csv，命名为frame/id.csv\n \tframeID = i+1;\n \tsetSlice(frameID);\n \trun(\"Find Maxima...\", \"prominence=750 output=[Point Selection]\");\n \troiManager(\"Add\");\n \t// 使用ROI管理器保存数据，减少IO，速度快上好几倍\n \trun(\"Select None\");\n }\n```\n\n以上代码，只是循环调用ImageJ自带的`Find_Maxima`功能，刚开始我是打算输出到Results窗口，然后保存每一帧的结果到csv文件，结果发现这样太慢了（大概9分钟）。后来决定把结果保存到ROI管理器，能够稍微加速一点（大概4分钟）。但是即便这么大段的代码，也只不过实现了位置信息的收集，还没办法实现强度时间曲线的提取、整理汇总和可视化。而且保存为roi，后续还得`pip install read_roi`，利用python脚本进行后续的处理。\n\n### python的代码实现\n\n主要依赖`skimage.io`实现视频数据的读取，`skimage.morphology.h_maxima`实现**Find_Maxima**的功能。为了学习写类，我把几个大步骤都写成了类：\n\n1. 首先是读取数据，smFRET\n2. 然后是Find_Maxima，finder\n3. 接着就是要把找到的maxima对应位置的强度时间曲线提取出来，所以有一个extractor\n\n```python\nfrom skimage import io\nfrom skimage.morphology import h_maxima\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass smFRET():\n    def __init__(self, filepath):\n        self.filepath = filepath\n        self.movie = io.imread(filepath, plugin='pil')\n        self.frames, self.width, self.height = self.movie.shape\n\n        \nclass finder(smFRET):\n    def __init__(self, filepath):\n        super(finder, self).__init__(filepath)\n    \n    def run(self, h):\n        '''\n        h这个参数可以使用ImageJ预览movie，用`Find_Maxima`命令获取\n        '''\n        self.maxima = []\n        # movie整体太大，一次性处理会出内存问题，所以按帧扫描\n        for frame in self.movie:\n            self.maxima.append(h_maxima(frame, h))\n        self.maxima = np.array(self.maxima)\n        self.mapping = self.projection()\n    \n    def projection(self):\n        '''\n        做一个z轴的projection\n        '''\n        return self.maxima.sum(axis=0)\n\n    \nclass extractor(finder):\n    def __init__(self, filepath, h):\n        '''\n        filepath: tif视频文件路径\n        h: 这个参数可以使用ImageJ预览movie，用`Find_Maxima`命令获取\n        '''\n        super(extractor, self).__init__(filepath)\n        self.run(h)\n        \n    def preview(self, vmax=100, vmin=4):\n        plt.imshow(self.mapping, vmax=vmax, vmin=vmin, cmap=\"jet\")\n        plt.colorbar()\n        plt.show()\n        \n    def threshold(self, vmax, vmin):\n        '''\n        根据find.mapping的预览结果设定vmax和vmin作为threshold\n        '''\n        # 要转化为float才能做broadcast计算\n        mm = self.mapping.astype(\"float32\")  \n        rows, cols = np.where((mm-vmin)*(mm-vmax)<=0)\n        self.locs = np.vstack([rows, cols]).T\n    \n    def choose(self, pid, show=False):\n        '''\n        pid: 单分子信号的索引，从0开始，不大于self.locs的长度\n        '''\n        row, col = self.locs[pid]\n        line = self.movie[:, row, col]\n        labels = self.maxima[:, row, col]*line.ptp()/10+line.mean()\n        # 把maxima的label也提取出来，看看啥情况\n        if show:\n            plt.plot(line)\n            plt.plot(labels, c='r')\n            plt.show()\n        return line, self.maxima[:, row, col]\n```\n\n严格来说，我这代码写得并不漂亮，因为我平时很多时候都是写零散的面向过程的代码，面向对象并不是我熟悉的领域。不过我喜欢一个对象可以保留很多数据和方法，还能够继承的特点。所以在一些heavy的场合，我也会使用。而使用起来也非常简单：\n\n```python\next = extractor(filepath, h=1000)\next.preview(vmax=100, vmin=4)\n# 可以先看到定位的结果，找到合适的vmax和vmin作为后续的threshold\n```\n\n![image-20210105182125942](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105182125942.png)\n\n```python\next.threshold(vmax=100, vmin=4)\nline,labels = ext.choose(30, show=True)\n```\n\n![image-20210105182112769](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105182112769.png)\n\n使用python代码，只需要1分40秒就可以完成任务（事实上文件读取和finder这两部分采取多进程多线程甚至numba，还能大幅提速），而且所有抽提出来的坐标信息都在ext对象中保存着，想看哪个，就可以使用choose的方法取值并查看强度时间曲线和对应的label。\n\n### 小结\n\nImageJ的Macro Language是我第一个成功应用并解决了科研上实际问题的编程语言，让我尝到了使用编程来高效解决一些laborious的图像数据分析工作的甜头，同时也让我树立了一些自信心。但是它毕竟过于简单，难以胜任更多更复杂的任务。虽然我现在已经很少使用ImageJ了，但是对它以及背后成千上万的开发者，我报以崇高的敬意。","tags":["summary"],"categories":["python","ImageJ"]},{"title":"单颗粒粒子光斑的高斯拟合","url":"/2021/01/05/GaussianFit-2D/","content":"\n像PALM、STORM等超分辨荧光成像，都是基于单分子定位。一般来说，单分子的荧光成像在xy平面上近似高斯分布（有兴趣可了解点扩散函数），可以用高斯拟合得到单分子的精确定位信息，从而突破光学衍射极限。这里就尝试使用python对二维粒子光斑实现高斯拟合。\n\n### 粒子光斑图像\n\n![image-20210105082931680](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105082931680.png)\n\n如上图所示，我模拟了两个圆形粒子光斑，左边的中心坐标是`(3, 3)`，右边的是`(3.2, 2.9)`，相当于有`0.22`个像素的偏移（若每个像素160 nm，实际偏移约35 nm），反映在粒子光斑上，就是箭头所指的像素块稍微亮度提高了一些。有了这样一个直观的感受，接下来就看看如何构造一个高斯光斑。\n\n### 二维高斯光斑的构造\n\n代码我是直接从[stackOverflow](https://stackoverflow.com/questions/21566379/fitting-a-2d-gaussian-function-using-scipy-optimize-curve-fit-valueerror-and-m)上抄来，稍微增加了一些注释，具体如下：\n\n```python\nimport numpy as np\n\ndef twoD_Gaussian(meshgrid, amplitude, xo, yo, sigma_x, sigma_y, theta, offset):\n    '''\n    meshgrid: 包含x和y，能够表示网格所有的索引(i,j)\n    xo, yo: 高斯分布的中心位置 \n    amplitude: 高斯分布的最大强度\n    sigma_x, sigma_y: 影响高斯光斑的长宽\n    theta: 控制角度，如果是一个椭圆，数值范围0-PI\n    offset: 补偿值，可以使所有的数值都是正数\n    '''\n    x, y = meshgrid\n    xo = float(xo)\n    yo = float(yo)    \n    a = (np.cos(theta)**2)/(2*sigma_x**2) + (np.sin(theta)**2)/(2*sigma_y**2)\n    b = -(np.sin(2*theta))/(4*sigma_x**2) + (np.sin(2*theta))/(4*sigma_y**2)\n    c = (np.sin(theta)**2)/(2*sigma_x**2) + (np.cos(theta)**2)/(2*sigma_y**2)\n    g = offset + amplitude*np.exp( - (a*((x-xo)**2) + 2*b*(x-xo)*(y-yo) \n                            + c*((y-yo)**2)))\n    # 注意返回值最好要ravel，不然curve_fit会报错\n    return g.ravel()\n```\n\n有了这样一个标准的构造函数，接下来就可以使用`curve_fit`对已有的数据进行拟合，反过来估计这个函数中一些参数，其中就包括高斯分布中心的位置`(xo, yo)`。\n\n### 粒子光斑的高斯拟合\n\n```python\nfrom scipy.optimize import curve_fit\n\n# Create x and y indices\nx = np.linspace(0, 6, 7)\ny = np.linspace(0, 6, 7)\nx, y = np.meshgrid(x, y)  # meshgrid生成了一整张索引map\n#create data\ndata = twoD_Gaussian((x, y), 10, 3, 3, 2, 2, 0, 10)\n# add some noise to the data and try to fit the data generated beforehand\ninitial_guess = (10, 3, 3, 2, 2, 0, 10)\ndata_noisy = data + 0.2*np.random.normal(size=data.shape)\n# 方便起见，构造一个带噪声的数据\n\npopt, pcov = curve_fit(twoD_Gaussian, (x, y), data_noisy, p0=initial_guess) \n# 需要拟合的参数直接全部就放到p0去了\n```\n\n然后查看popt中的结果：\n\n![image-20210105084727546](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210105084727546.png)\n\n可以看到，加入噪声后做高斯拟合，估计的参数`xo = 3.249`，`yo = 2.916`，跟前面`(3.2, 2.9)`又有微小的差异（大概5-8个 nm的偏移），所以说，单分子定位精度离不开非常好的信号质量。\n\n","tags":["gauss","fit"],"categories":["python"]},{"title":"累积分布函数和S型曲线拟合","url":"/2021/01/04/cdf/","content":"\n查看数据分布情况，以及使用特定的函数模型对已观测的数据进行拟合是非常常见的操作。这里从正态分布入手，到应用**Logistic**模型完成累积分布曲线的拟合，并根据拟合后模型参数重新得到样本的均值。\n\n### 导入依赖包\n\n本case在jupyter notebook中运行，可先导入以下包：\n\n```python\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\n\nfrom collections import Counter\nfrom scipy.optimize import curve_fit\n```\n\n### 制作正态分布数据集\n\n先制作一个数据集，均值设置为10，变异度为5。\n\n```python\nmu = 10\nsigma = 5\nX = mu + sigma*np.random.randn(1000)\n```\n\n简单作图可以看到如下的数值分布：\n\n![temp](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/temp.svg)\n\n如果就X数据集直接计算均值，发现与10还是有一些差距：\n\n![image-20210104191011726](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210104191011726.png)\n\n### 获取分布计数\n\n主要使用`collections.Counter`函数：\n\n```python\na = Counter(X)\nb = dict(a)\nX2 = []\nfor key in b:\n    X2.append([key, b[key]])\nX2 = pd.DataFrame(X2, columns=['value', 'count'])\nX3 = X2.sort_values(by='value')\nX3['cum_count'] = X3['count'].cumsum()  # 计算累积计数值\nsns.lineplot(x='value', y='cum_count', data=X3)\nplt.show()\n```\n\n![temp2](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/temp2.svg)\n\n### 选取模型进行曲线拟合\n\n这里主要利用`scipy.optimize.curve_fit`来实现曲线拟合，需要选择合适的函数模型。对于S型曲线，比较常用的是**Logistic**模型，关于S型曲线拟合，可以参考《[轻松构建多种模型拟合S型曲线](https://zhuanlan.zhihu.com/p/147467845)》。\n\n```python\ndef func(x, a, b, c):\n    '''\n    使用Logistic模型来拟合\n    该模型有3个参数\n    当x=b/c时，曲线处于拐点，可用于估计正态分布的峰值\n    https://zhuanlan.zhihu.com/p/147467845\n    '''\n    return a/(1+np.exp(b-c*x))\n\nparams = curve_fit(func, X3['value'], X3['cum_count'])\npopt, pcov = params\nprint(popt[1]/popt[2])\n```\n\n![image-20210104192236878](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20210104192236878.png)\n\n可以看到拐点对应的value，跟我们最初设置的`mu=10`非常接近了。\n\n### 查看拟合效果\n\n```python\nX4 = [func(i, popt[0],popt[1],popt[2]) for i in X3['value']]\nX3['fit'] = X4\n\nsns.lineplot(x='value', y='cum_count', data=X3)\nsns.lineplot(x='value', y='fit', color='r', data=X3)\nplt.savefig(os.path.join(os.path.expanduser('~/Desktop/'), 'temp.svg'))\n```\n\n![temp3](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/temp3.svg)\n\n> 注意一下，后面如果命名临时文件，简易带上时间戳，不然图床会覆盖保存。\n\n### 参考链接\n\n1. [轻松构建多种模型拟合S型曲线](https://zhuanlan.zhihu.com/p/147467845)\n\n2. [Exponential Fit with Python](https://swharden.com/blog/2020-09-24-python-exponential-fit/)\n\n3. [累积分布函数](https://baike.baidu.com/item/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0)\n\n4. [python 曲线拟合](https://blog.csdn.net/Fuxiu279/article/details/88429801)\n\n","tags":["curveFit","data","cumulative","distribution"],"categories":["python"]},{"title":"使用ImageJ提取某点的强度时间曲线","url":"/2020/12/30/getIntensityCurve/","content":"\n有时候拿到原始视频数据(xyt)之后，需要在ImageJ中稍微预览一下，了解大概情况。其中一个重要的view是得看一下某个位置的信号的闪烁情况，所以需要提取该位置(x,y)的强度随时间变化的曲线。为了方便，我写了一个简单的ImageJ Macro脚本来实现此功能。脚本运行后，用户在图像上点击某个位置，就会把该位置保存到ROI管理器，然后提取该位置的Intensity(t)，并绘制图像。\n\n### 代码\n\n代码的几个要注意的地方：\n\n1. 需要自定义选取框的大小，对于单分子荧光光斑，4就足够了\n2. 可以设置是否多次选取，如果是多次，就默认选取3个点\n3. 提取的intensity是选取框的均值，这样能有效抑制背景噪声波动\n\n在实现上，这个代码还要解决以下问题：\n\n1. 监听并返回用户点击鼠标事件\n2. 自动切换Slice，即逐帧同xy坐标取值\n\n\n```javascript\n/*\n * 该脚本适用于手动分析TIRF视频数据中某点的强度随时间变化情况\n * Author: Xiao-Dong Xie\n * 2020年12月31日\n */\n\ntime_interval = Stack.getFrameInterval();  \n// 内置函数，获取stack的帧时间间隔，适用于原始TIRF数据\nboxWidth = 4;\n// 点选取值框大小\nmultiCheck = true; \n// 如需多次检查，修改此处为true，可将main置入for循环中\nmultiCheckNum = 3;\n\n// ================================================\nif (multiCheck) {\n\tfor (i = 0; i < multiCheckNum; i++) {\n\t\tmain(boxWidth, i); \n\t}\t\n}\nelse {\n\tmain(boxWidth, 0);\n}\n\n// =================================================\n\nfunction main(boxWidth, cid){\n\t/** 点击stack上一个点，返回time profile\n\t *  boxWidth: 全选框大小\n\t *  cid：选点的序号\n\t */\n\tloc = chooseParticle();\n\tx = loc[0];\n\ty = loc[1];\n\tmakePoint(x, y, \"small yellow hybrid\");\n\troiManager(\"add\"); // 把该点加入roi管理器\n\twait(300);\n\tn = getSliceNumber();\n\tlong = nSlices;\n\tv = newArray(long);\n\tt = newArray(long);\n\tfor (i = 0; i < long; i++) {\n\t\tsetSlice(i+1);\n\t\t// va = getPixel(x, y);\n\t\t// 用取小区域均值的方式更好\n\t\tva = getRectRegionMeanValue(x, y, boxWidth);\n\t\tv[i] = va;\n\t\tt[i] = i*time_interval;\n\t}\n\tsetSlice(n);\n\tPlot.create(\"Time Profile \"+cid, \"Time (sec)\", \"Intensity\", t, v);\n\tPlot.show();\n}\n\nfunction chooseParticle(){\n    // 鼠标单击图像上某个点，即返回其坐标\n    leftButton = 16;\n    flags = 0;\n    while(flags&leftButton == 0) getCursorLoc(x,y,z,flags);\n    return newArray(x,y);\n}\n\nfunction getRectRegionMeanValue(x, y, width){\n\t//以(x,y)坐标为中心，获取边长为width的正方形区域的平均强度\n\t// 不返回最大的强度，是因为波动比较大\n\tmakeRectangle(x-width/2, y-width/2, width, width);\n\tgetStatistics(area, mean, min, max, std, histogram);\n\treturn mean;\n}\n```\n\n### 结果\n\n使用的时候，把视频数据（tif格式）打开后，再把`getIntensityCurves.ijm`脚本文件拖入Fiji打开，然后在console中点击`run`运行，然后在视频图像上选取你想提取数值的点。结果如下：\n\n![image-20201231082554717](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201231082554717.png)","tags":["TIRF"],"categories":["ImageJ"]},{"title":"免费下载网易云音乐mp3的小工具","url":"/2020/12/30/downloadCloudMusic/","content":"\n直接上代码吧，逻辑非常简单，就是从网易云分享链接中提取music的ID，然后构造外链：`http://music.163.com/song/media/outer/url?id={musicID}.mp3`，再直接用requests模块请求这个外链，下载内容保存为mp3格式的文件即可。为了方便实用，我还利用`pySimpleGUI`做了一个非常简易的用户界面，方便操作。\n\n```python\nimport requests\nimport re\nimport os\nimport PySimpleGUI as sg\n\ndef extractMusiceID(url):\n    pattern = re.compile(r'id=\\d+')\n    mID,uID = pattern.findall(url)\n    mID = mID.split(\"=\")[1]\n    uID = uID.split(\"=\")[1]\n    print(\"User:{}\\nMusic:{}\".format(uID,mID))\n    return mID\n\ndef downloadMusic(mID,name):\n    url = \"http://music.163.com/song/media/outer/url?id={}.mp3\".format(mID)\n    # 需要使用header，不然url重定向之后抓不到\n    header = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n    r = requests.get(url,headers=header)\n    data = r.content\n    wks = os.path.expanduser(\"~/desktop\")  # 默认下载到桌面\n    fpath = os.path.join(wks,\"{}.mp3\".format(name))\n    with open(fpath,\"wb\") as f:\n        f.write(data)\n\ndef main(url,name):\n    mID = extractMusiceID(url)\n    downloadMusic(mID,name)\n\nif __name__ == \"__main__\":\n    \n    layout = [\n            [sg.Text(\"曲名\"),sg.Input(key='-Name-')],\n            [sg.Text(\"链接\"),sg.Input(key='-Url-')],\n            [sg.Button('Download'),sg.Exit()]\n            ]\n\n    window = sg.Window('网易云音乐下载', layout)\n\n    while True:\n        event, values = window.Read() \n        if event == 'Download':\n            name = values['-Name-']\n            url = values['-Url-']\n            main(url,name)\n        if event in (None, 'Exit'):      \n            break\n    window.Close()\n```\n\n运行之后，弹出一个窗口，填写两行信息，Download就会把mp3下载到桌面：\n\n![image-20201230122701166](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201230122701166.png)\n\n然后输入歌曲名字，以及分享链接。链接可以从网易云音乐中获取：\n\n![image-20201230122626573](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201230122626573.png)\n\n效果如下：\n\n![image-20201230122805612](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201230122805612.png)\n\n### 来一首《梦伴》\n\n\n<iframe src=\"//player.bilibili.com/player.html?aid=23415950&bvid=BV1Kp411Z7ci&cid=39036220&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" > </iframe>\n","tags":["requests","gui"],"categories":["python"]},{"title":"pandas模块常用功能备忘录","url":"/2020/12/29/pandasUsageSummary/","content":"\n使用python进行数据分析，离不开`numpy`，`pandas`，`matplotlib`三个包。为了作图好看，我还常用`seaborn`。不过`numpy`使用起来还是没有pandas那么爽，所以我还是用pandas和seaborn最多。所以趁着还有一点写博客的热情，先整理一下pandas的常用功能。\n\n当然了， 介绍最详细的还是官网文档：\n\nhttps://pandas.pydata.org/docs/\n\n### 读取数据\n\npandas可以读取各类数据文件，比如`csv`、`xlsx`、`hdf5`等。而读取的命令一般输入`pd.read`代码自动补全提示就会出来很多。我这里也不多说，想查看，可以输入一下命令：\n\n```python\nimport pandas as pd\nfor func in dir(pd):\n\tif func.startswith('read'):\n\t\tprint(func)\n```\n\n使用方法基本上都是要输入filepath，然后`pd.read_hdf`还需要输入hdf5的dataset的key名。我在处理picasso产出的中间数据时，还经常用到以下命令：\n\n```python\ndef hdf2dataframe(filepath):\n    '''\n    只适用于picasso分析过程中生成的hdf5文件数据结构\n    输出一个字典，包含了不同的dataframe\n    '''\n    data = {}\n    dataset = h5py.File(filepath, 'r')\n    for key in dataset.keys():\n        df = pd.DataFrame(dataset[key][()],dtype=\"float64\")  # 注意数据精度\n        data[key] = df\n    return data\n```\n\n这个自定义函数可以把hdf5数据中不同的dataset转化为pandas的DataFrame，并保存到字典中。但事实上当你知道dataset的key名很固定，基本都是`locs`的时候，只需要下面一行命令就可以了：\n\n```python\ndata = pd.read_hdf('cluster_filtered.hdf5','locs')\n```\n\n### 保存数据\n\n对于`pd.DataFrame`对象，可以把数据表保存到各种格式的文件中。下面简单举几个例子：\n\n```python\n# 假设data是一个dataFrame\ndata.to_csv(filepath, index=None)  # 保存为csv文件\ndata.to_excel(filepath, index=None)  # 保存为xlsx文件\ndata.to_pickle(filepath)  # 保存为pkl文件\ndata.to_hdf(filepath, 'locs')  # 保存为hdf5文件\n```\n\n其中csv和xlsx文件都可以使用excel打开，我经常使用，但为了避免多余的index列，我通常会指定`index=None`。处理的中间数据若需要保存，使用pkl文件是最方便的，没有其他参数需要声明。保存为hdf5文件跟打开的时候类似，还要写key名。\n\n### pd.DataFrame对象\n\n数据帧是pandas最重要的概念，也是最常用的一种数据结构。简单来说，就跟你在excel中看到的表格一样的。从形状上讲，就是一个二维矩形。\n\n使用`pd.read_??`方法读取数据文件，返回的基本上都是数据帧，然后你就可以进行各种愉快的操作。当然你也可以把程序运行中其他类型的数据转化为一个DataFrame，下面介绍几种方式：\n\n```python\nimport numpy as np\na = np.random.randint(10, size=(5,3))  # 产生一个3x5的随机数矩阵\nb = pd.DataFrame(a, columns=list('abc'))  \n# 数据有5列，必须给column名，\n# index名也可以指定，若无则会默认从0开始\n```\n\n以上就是从numpy二维数组直接转成数据帧的操作，就是要注意columns的命名。效果如下：\n\n<img src=\"https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229201642898.png\" alt=\"image-20201229201642898\"  />\n\n另外也有一些更傻瓜的方法：\n\n```python\na = pd.DataFrame()   # 可以先创建一个空的数据帧\na['a'] = [x for x in range(3)]\na['b'] = np.random.randint(10, size=(3,))\n```\n\n先创建一个空的数据帧对象，然后赋值也是可以的，但是要注意每一个column的数据长度要一致。这个操作有点像字典。没错，你也可以直接把字典转化为数据帧：\n\n```python\na = {'a':[1,2,3], 'b':[4,5,6]}\nb = pd.DataFrame(a)\n```\n\n### 数据帧的取值\n\n```python\na = np.random.randint(10, size=(3,5))  # 产生一个5x3的随机数矩阵\nb = pd.DataFrame(a, columns=list('abcde'))  # 数据有三列，给column名\nb.loc[0,'c']  # 注意是方括号，第一个是index name， 第二个是column名，返回单个值\nb.iloc[0] # 注意方括号，这里只能输入index名，返回一行数据（pd.Series）\n```\n\n如上所示，数据帧就是一个矩阵，取值给索引就好，不过在我的实践过程中，很少直接取某个特定位置的数值。遍历倒是常用，不过需要注意的是，为了加快速度，建议使用如下的遍历方式：\n\n```python\nfor idx,row in df.iterrows():\n    # row是数据帧的某一行\n    doSomeThingWith(row)\n```\n\n### 数据帧分组\n\n```python\ngp =data.groupby(by=['column_name_1', 'column_name_2'])\n```\n\n一般分组完了，还可以遍历分组，做一些操作：\n\n```python\nfor key, df in gp:\n    # key 是分组数据对应 column_name_1', 'column_name_2' 这两列的值\n    # df 是分组的子数据帧\n    doSomeThingWith(df)\n```\n\n### 数据筛选\n\n```python\ndata2 = data.filter(items=['column_1', 'column_2'])\n# 类似的还有一个drop方法\n```\n\n上述代码可以从data原数据帧中取出两列值。\n\n```python\nlabel = [0,2,3]\nregion_new = region[region['Cluster'].isin(labels)]  \n```\n\n上述代码可以按`Cluster`这一列的值进行筛选，如果值存在于label列表中，则被提取出来。\n\n```python\ndf = localization[(localization['x']>(x-radii))&\\\n                 (localization['x']<(x+radii))&\\\n                 (localization['y']>(y-radii))&\\\n                 (localization['y']<(y+radii))]\n```\n\n上述代码根据数据帧中的数值指定范围进行筛选，注意方括号，然后多个判断条件的布尔运算要用小括号。\n\n### 数据排序\n\n`data.sort_values(by=??)`，偶尔会用。\n\n### 数据翻转\n\n`data.T`\n\n把row和column翻转一下，偶尔会用。\n\n### 数据合并\n\n`pd.concat([df1, df2])`\n\n把一些符合条件的DataFrame合并，注意前提是它们具有相同的column，然后可以放到一个列表里面。\n\n下面还提供一个例子，怎么把series叠加做成数据帧。\n\n```python\na = pd.Series([1,2,3], index=list('abc'))  # 序列\nb = pd.Series([4,5,6], index=list('abc')) \nc = pd.concat([a,b]) # 纵向叠加series\nd = pd.concat([a,b], axis=1) # 横向叠加\ne = d.T # 翻转\n```\n\n### 数据融化\n\n`pd.melt`\n\n可以把新建一个column，把其中某些column转成新的column的value，也非常实用，在seaborn作图的时候，用到过一些。\n\n### 随机采样\n\n`data.sample([n, frac, ...])`\n\n可以指定随机返回的数量，也可以指定比例。加入data的长度是1000，n<1000, frac在0-1之间取小数。\n\n### 后记\n\n写到这里，想写点什么的冲动消退，想想我又干了一件蠢事。什么模块什么功能特别是具体到哪个函数的用法，真的不要去试图记忆甚至汇总它们。如果你用的别人的，请查看他们的文档。如果是你自己写的，请自己写好文档。让这些电子记录成为你的“第二大脑”，这不就是我的初心么？所以像这种事情，只有这一次，以后的每一篇博文，都要对应我自己在数据分析或者日常生活中遇到的具体的可以用编程的方式解决的问题。","tags":["pandas"],"categories":["python"]},{"title":"基于python的DNA定量浓度计算器","url":"/2020/12/29/oligoCalculator/","content":"\n### 起因\n\n使用离线的OligoCalculator只能一个个序列拷贝进去然后输入A260的值，再计算。这样做太繁琐了，如果数量比较少还好。但如果一次性测定比较多的链，很容易复制出错。所以我在《[基于紫外可见光吸收光谱的DNA分子定量](https://sheldonxxd.github.io/2020/12/28/basicUVspectrumAnalysis/index.html)》文章的基础之上，进一步参照[Thermo的说明](https://www.sigmaaldrich.com/china-mainland/technical-documents/articles/biology/quantitation-of-oligos.html)写了一个能够批量自动根据吸光度计算样品浓度的python版本的oligo calculator。\n\n> 要插入自己之前的文章的url，记得加上index.html，不然无法跳转超链接。\n\n### 输入\n\n![image-20201229100558994](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229100558994.png)\n\n注意这个表格文件前面三列都是《基于紫外可见光吸收光谱的DNA分子定量》文章中代码处理后生成的，而Label、Sequence、Modufication以及DiluteRatio需要自己补充。拿到了这样一张表之后，可以使用下面的表进行计算。\n\n### 代码\n\n```python\nimport pandas as pd\n\ndef getNearestBaseCombination(seq):\n    n = len(seq)\n    data = []\n    for i in range(n-1):\n        data.append(seq[i:i+2])\n    return data\n\ndef getRepeatSingleBase(seq):\n    return list(seq[1:-1])\n\ndef getMolarConc(Abs, Seq, Length=1):\n    '''\n    === 输入参数 ===\n    Abs: Float，测定UV-Vis吸收光谱的峰值，一般为A260\n    Seq: String，寡核苷酸样品的序列 \n    Length: Float，光程，一般为1 cm\n    === 返回值 ===\n    E_seq: 单纯计算序列获得的消光系数，如有修饰基团，请到IDT上查询其消光系数后做浓度校正\n    Conc: Float, 测定样品的摩尔浓度，以uM（umol/L）为单位\n    如要获取原液样品，可自行乘以稀释倍数\n    '''\n    e = {'A':15400, 'C':7400, 'G':11500, 'T':8700, \n        'AA':27400, 'AC':21200, 'AG':25000, 'AT':22800,\n        'CA':21200, 'CC':14600, 'CG':18000, 'CT':15200,\n        'GA':25200, 'GC':17600, 'GG':21600, 'GT':20000,\n        'TA':23400, 'TC':16200, 'TG':19000, 'TT':16800}\n    \n    # 消光系数表格， 参考链接如下\n    # https://www.sigmaaldrich.com/china-mainland/technical-documents/articles/biology/quantitation-of-oligos.html\n    cut = getNearestBaseCombination(Seq)\n    repeat = getRepeatSingleBase(Seq)\n    E_seq = 0\n    for c in cut:\n        E_seq += e[c]\n    for r in repeat:\n        E_seq -= e[r]\n    # E的单位是L ⋅ mol-1 ⋅ cm-1\n    Conc = Abs/(E_seq*Length)*1e6\n    # Conc的单位是 uM\n    return E_seq,Conc\n\ndef main(filepath):\n    '''\n    filepath：输入汇总表格文件路径\n    表格中必须包含样品的吸光值（PeakValue）,序列（Sequence）和稀释倍数(DiluteRatio)三列信息\n    建议在`extractUVspectrum.py`生成的excel文件中补充序列和稀释倍数即可\n    计算完成后，在表格中新增消光系数和原液浓度两列信息\n    '''\n    data = pd.read_excel(filepath)\n    concs = []\n    Es = []\n    for idx, row in data.iterrows():\n        e,c = getMolarConc(row['PeakValue'], row['Sequence'])\n        c = c*row['DiluteRatio']\n        concs.append(c)\n        Es.append(e)\n    data['E(L⋅mol-1⋅cm-1)'] = Es\n    data['Conc(uM)'] = concs\n    data.to_excel(filepath, index=None)\n    print('浓度计算完成，已刷新表格数据！')\n\nif __name__ == \"__main__\":\n    filepath = \"/path/to/ssDNA定量结果.xlsx\"\n    main(filepath)\n```\n\n### 结果\n\n![image-20201229100438254](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229100438254.png)\n\n计算完成后，新出现了两列数据，分别是不同样本所对应的消光系数和稀释前原液的浓度。需要注意，**如果有修饰，自行到[IDT查询修饰基团的消光系数](https://sg.idtdna.com/site/Catalog/Modifications)，跟此表中的消光系数相加，然后根据琅勃比尔定律对浓度进行校正**。\n\n![image-20201229103945287](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201229103945287.png)\n\n如上图所示，在excel表格中进行操作即可，最后得到最终的准确的定量浓度结果。","tags":["DNA","calculator"],"categories":["python"]},{"title":"基于紫外可见光吸收光谱的DNA分子定量","url":"/2020/12/28/basicUVspectrumAnalysis/","content":"\n我们实验室采集UV-Vis吸收光谱，只能一个一个样品地来。有时候我要对几十条DNA单链做定量的时候，一个个去记录 A_260nm 的数值比较烦（而且有时候峰值会有微弱漂移），所以打算用python写个小工具来实现峰值的提取。\n\n### 数据文件分析\n\n通过仪器配套软件可以导出csv文件，命名格式是`Sample??.样品.csv`。\n\n![image-20201228134634805](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228134634805.png)\n\n但是csv文件内数据比较脏，具体如下：\n\n![image-20201228134427947](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228134427947.png)\n\n第一行和最后一行都不是正经的内容，而第二行的column name也很随意，所以后面在使用pandas模块读取csv文件的时候要做一些处理。\n\n### 完整代码\n\n要实现功能除了得正确读取数据之外，还有以下几个要点：\n\n1. 使用glob收集csv文件（列表顺序未必等同于上样顺序）\n2. 提取sample的ID（对应着你测定样品的顺序）\n3. 使用`np.argmax`获取峰值所在序列的索引，然后取峰值\n4. 根据sampleID对数据进行排序\n\n具体代码如下：\n\n```python\nimport os, glob\nimport numpy as np\nimport pandas as pd\nimport re\n\ndef exportMaxPeak(wks):\n    '''\n    输入包含UV吸收光谱导出csv文件的路径\n    输出A260nm的峰值数据表excel到目录下\n    注意不要导出blank的光谱\n    '''\n    files = glob.glob(os.path.join(wks,'*.csv'))\n    data = []\n    pattern = 'Sample(\\d+).样品.csv'\n    for f in files:\n        # 处理文件名提取ID\n        _, fname = os.path.split(f)\n        # 读取光谱数据\n        label = re.search(pattern, fname)\n        sid = label.group(1) # 直接提取数字\n        sid = float(sid)\n        df = pd.read_csv(f, header=1)\n        mid = np.argmax(df[\"A\"])\n        max_wav = df[\"nm\"][mid]\n        max_OD = df[\"A\"][mid]\n        # 收集数据到列表\n        data.append([int(sid), max_wav, max_OD])\n    # 处理数据表格\n    data = pd.DataFrame(data, columns=[\"Sample\",\"Wavelength\", \"PeakValue\"])\n    data.sort_values(by='Sample', inplace=True)  # 排序\n    data_path = os.path.join(wks,\"A260-Max.xlsx\")\n    data.to_excel(data_path, index=False)\n    print(\"数据已保存到{}!\".format(data_path))\n\nif __name__=='__main__':\n    # 修改变量wks的值为你存放数据的目录\n    wks = r'D:\\Lab\\Data\\UV-Vis\\20201228'\n    exportMaxPeak(wks)\n```\n\n### 处理效果\n\n![image-20201228135130971](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228135130971.png)\n\n然后再基于生成的这个汇总表，把实际sample的lable以及序列填写上去，再使用`Oligo Calculator`即可计算出来样品的浓度了。\n\n![image-20201228135309897](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228135309897.png)\n\n### 使用OligoCalculator工具\n\n![image-20201228131109199](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201228131109199.png)\n\nOligoCalculator工具[点此链接](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/Oligo%20caculator.exe)下载。\n\n把序列输入进去（注意去除一些修饰），然后输入紫外测得的A260峰值，点击`Caculate`即可计算。","tags":["spectrum","DNA"],"categories":["python"]},{"title":"搭建阿里云OSS图床","url":"/2020/12/27/mergeAllNotes/","content":"\n我的笔记很多东西都比较零碎，这样不适合构建一个比较完整有序的笔记系统（第二大脑）。自从上手了github-pages之后，决定全面转向markdown+github，这样可以到处访问查看，为了解决插图文件大小问题，还特地购买了阿里云的对象存储服务。一系列的操作主要参考《[【Typora】typora+picgo+阿里云oss搭建图床](https://www.cnblogs.com/myworld7/p/13132549.html)》。\n\n### 购买阿里云OSS并配置图床\n\n可以直接搜索[包月的套餐](https://common-buy.aliyun.com/?spm=5176.7933691.1309819..68b22a66FQKm7f&commodityCode=ossbag&request=%7B%22region%22%3A%22china-common%22%7D#/buy)：\n\n![image-20201227162121971](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227162121971.png)\n\n我选择的是40GB，大陆通用，两年。购买之后进入控制台新建一个bucket（水桶）。\n\n![image-20201227161929457](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161929457.png)\n\n注意权限设置为公共可读，不然上传发布到github-pages上就看不到了。\n\n### 下载和配置picgo\n\ntypora支持picgo图床上传工具，直接到github上下载最新版本\n\nhttps://github.com/Molunerfinn/PicGo/releases\n\n把阿里云的Access Key以及其他信息复制填入配置选项即可：\n\n![image-20201227161730671](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161730671.png)\n\n### 配置typora\n\n![image-20201227161535243](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227161535243.png)\n\n到这一步，就可以开心的在本地使用typora写markdown，截图使用`snipaste`，直接复制粘贴过来就开始上传到自己的图床。不过第一张图片会先打开picgo程序，所以稍微慢一点。\n\n> 想想我之前还写了一个python脚本缩小图片大小，现在完全没有这个必要了，啊哈哈哈哈！","tags":["图床"],"categories":["blog"]},{"title":"使用python提取txt文本中关键信息并汇总到表格","url":"/2020/12/26/collectFilesUsingPython/","content":"\n使用python处理文件、文件夹和路径之类的事情，主要是用到`os`、`glob`、`re`和`shutil`等模块。\n\n### 批量创建子目录\n\n在处理数据的时候，不可避免地会涉及到各种文件的批量处理。比如我在处理和分析数据的时候，需要根据单个原始数据创建子目录用于存放后续分析产生的各种中间数据。所以我写了下面这段代码：\n\n```python\nimport os\nfrom glob import glob\n\ndef makeSubdirectory(wks):\n    '''\n    wks: 某次DNA-PAINT实验存放lif文件的目录\n    此程序会对lif文件自动新建同名子目录\n    '''\n    lifs = glob(os.path.join(wks, \"*.lif\"))\n    for lif in lifs:\n        filepath, ext = os.path.splitext(lif)  \n        # 分离文件的拓展名和其他路径，比字符串split('.')更安全\n        try:\n            os.mkdir(filepath+'/')\n        except:\n            print('Subdirectory Existed! -- %s'%(filepath))\n    print('Job Finished!')\n\nif __name__ == \"__main__\":\n    wks = r\"E:\\xxd\\TIRF-LeicaDMi8\\20201221\" \n    makeSubdirectory(wks)\n```\n\n需要注意的是：\n\n1. `os.mkdir`命令如果是路径已经存在就会报错\n2. glob中可以使用`*`作为通配符匹配所有后缀为`lif`的原始数据文件，返回一个list\n3. `os.path.splitext`可以把文件路径的后缀跟名字分开\n4. `try ... except ...` 可以有效处理程序运行中的异常情况\n\n### 从txt文件中收集图像参数\n\nlif文件是leica显微镜产生的数据，可以使用ImageJ打开，然后保存为tif，方便后面的处理。此时，图像的一些相关信息可以在ImageJ中查看，比如激光强度、每帧间隔时间等。然后Info还可以保存为txt文件。为了方便，我写了一个自动化脚本，收集Info文件中的重要参数并汇总到一个excel表格中。代码如下：\n\n```python\nimport os\nfrom glob import glob\nimport pandas as pd \nimport re \n\ndef findTxt(wks):\n    infos = []\n    for d in os.walk(wks):\n        path, dirs, files = d\n        for f in files:\n            if f.startswith('Info') and f.endswith('txt'):\n                # 根据文件命名特征进行筛选\n                txt = os.path.join(path,f)\n                infos.append(txt)\n    return infos\n\ndef extractInfo(txt):\n    '''\n    txt: Info for **.txt的文件路径\n    ==============================\n    从txt中提取以下关键信息：\n    1. **激光强度**：WFLaserChannelInfo_CurrentValue = 100\n    2. 穿透深度：TIRF_PenetrationDepth = 171.008186233857\n    3. 激光波长：WFLaserChannelInfo_Wavelength = 638\n    4. 相机温度：ATLCameraSettingDefinition|TargetTemperature = -75\n    5. **每帧间隔时间**：Frame interval: 0.02046 sec\n    '''\n    recs = {'WFLaserChannelInfo_CurrentValue = ':0, \n           'TIRF_PenetrationDepth = ':0, \n           'WFLaserChannelInfo_Wavelength = ':0,\n           'TargetTemperature = ':0,\n           'Frame interval:':0}\n    # 避免构造复杂的pattern正则表达式，把复杂的写入key\n    with open(txt) as f:\n        data = f.read()\n    \n    for key in recs:\n        pattern = '{}(.+)'.format(key)\n#         print(pattern)\n        a = re.search(pattern, data)\n        r = a.group(1)\n        if r.endswith('sec'):\n            r = r.split(' ')[1]\n        recs[key] = float(r)\n    return recs\n\ndef main(wks):\n    infos = findTxt(wks)\n    newkeys = ['ExIntensity', 'PenetrationDepth','ExWavelength','ccdTemperature','frameInterval']\n    data = {x:[] for x in newkeys}\n    for txt in infos:\n        recs = extractInfo(txt)\n        # 字典的键名修改，使用pop方法\n        keys = list(recs.keys())\n    #     print(keys)\n        for newkey, oldkey in zip(newkeys, keys):\n            data[newkey].append(recs[oldkey])\n    data = pd.DataFrame(data)\n    data['filepath'] = infos\n    data.to_excel(os.path.join(wks, 'infos.xlsx'), index=None)\n\nif __name__ == \"__main__\":\n    wks = r\"E:\\xxd\\TIRF-LeicaDMi8\\20201223\" \n    main(wks)\n```\n\n代码稍微长了一点，还弄出来两个函数。寻找Info文件还好说，因为文件命名都带有Info前缀，然后文件又是txt类型，直接利用`os.walk`获取总的工作目录下所有的文件，然后遍历，根据文件名进行筛选即可。注意`os.walk`返回的是一个迭代器，每次吐出来一个根目录路径，根目录下文件夹列表以及文件列表组成的三元元组。\n\n从`Info.txt`中提取信息还颇为费事，因为Info中信息量非常大，我不可能用`f.readlines()`的方法去读取指定的行，所以选择了用正则匹配的方式。但是正则我用得很少，而且为了减轻正则pattern的设计难度，我把pattern中变化的部分尽可能地定义到字典的key中。我觉得这个思路（拿通用性换效率）还挺不错的——能把事情解决就好。re模块中我常用search和findall两个功能。需要注意的是：\n\n1. re.search只返回找到的第一个匹配的字符串\n2. re.findall返回所有匹配的字符串所组成的list\n3. 如果pattern中放括号，括号可以作为group提取信息，但是注意group的索引id\n4. 修改字典的键名的方法\n5. 使用pandas模块，构建dataframe，然后方便保存为excel可以打开的xlsx文件\n\n实现效果如下：\n\n![image-20201227120627018](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201227120627018.png)\n\n\n\n","tags":["filepath"],"categories":["python"]},{"title":"批量缩小博客中的图片","url":"/2020/12/24/resizeImages/","content":"\n目前我最熟悉[python](https://www.liaoxuefeng.com/wiki/1016959663602400)，另外也会写一点[ImageJ的脚本处理](https://zhuanlan.zhihu.com/p/60999196)和分析图像。可是编程技能“用进废退”，特别是人年纪越大，对于各种繁复的代码细节就越难记忆。所以很多码农都会写博客，并且把博客当作“第二大脑”。我当然也不例外，以后也时不时会把自己写过的代码整理到博客上。\n\n### 需求\n\n我喜欢在文章中插入截图，实现图文并茂的效果。但是github的仓库容量有限，而且图片大小尺寸不一造成不美观。虽然可以定义`css`文件来控制显示，但它只能解决美观问题。而使用图床能够避免图片太多超出仓库容量限制，但把各种图片放到公共图床上既不能让我放心，也跟我目前的workflow不兼容。所以我决定写一个小的工具代码，实现对插图文件的resize。具体有以下需求：\n\n1. 支持对png, jpg, jpeg等常见图像的resize\n2. 已经resize的不要进行重复的操作\n3. 原始大图要保留而且方便查找\n4. 不破坏markdown中对图片的引用\n\n### 代码\n\n代码要点如下：\n\n1. 使用glob批量读取多种格式的图片地址到列表\n2. 过滤已经被resize处理的图片\n3. pillow库中的resize方法的调用\n\n废话不多说，直接上代码：\n\n```python\nfrom PIL import Image \nimport os \nfrom glob import glob\n\ndef resizeImages(wks):\n    '''\n    输入makrdown附件目录地址，\n    对其中所有png\\jpg\\jpeg等格式的图像进行缩小，\n    固定宽度到600，\n    原图被重命名带`_large.*`后缀\n    如果有带此后缀的，则两张图像都不进行处理\n    '''\n    files = []\n    formats = ['png','jpg','jpeg']\n    # 如果想压缩gif，请参考\n    # https://blog.csdn.net/huanyue6660/article/details/79423326\n    for ext in formats:\n        files.extend(glob(os.path.join(wks, '*.{}'.format(ext))))  # 使用extend的方式合并新增的list\n    \n    jobs = []\n    for f in files:\n        ext = os.path.splitext(f)[-1]\n        if (f+'_large%s'%(ext) in files) or (f.endswith('large%s'%(ext))):\n            continue\n        else:\n            jobs.append(f)\n\n    for job in jobs:\n        ext = os.path.splitext(job)[-1]  # 获取文件后缀名，注意这个带点\n        a = Image.open(job)\n        a.save(job+'_large{}'.format(ext))\n        w, h = a.size\n        if w>600:\n            # 只缩小大图\n            b = a.resize(size=(600, int(h*600/w))) # 注意size得是整数\n        else:\n            b = a\n        b.save(job)\n        print('{} resized to width = 600 px!'.format(job))\n\nif __name__ == \"__main__\":\n    wks = r\"D:\\hexo\\blog\\source\\_posts\"  # windows系统文件路径，注意不要去掉r\n    subdirs = glob(os.path.join(wks,\"*/\"))\n    # print(subdirs)\n    # 对_posts目录下所有图片进行处理\n    for subdir in subdirs:\n        resizeImages(subdir)\n```\n\n### 使用\n\n我喜欢把这种高复用的小工具代码做好接口，写到python脚本中，然后用配置好的vscode打开，根据需求修改参数（这里是`_posts`目录的地址），然后按`Ctrl+F5`运行。\n\n### 结果\n\n![image-20201224114927774](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201224114927774.png)\n\n原始图像被重名为带`_large`后缀的文件。","tags":["pillow"],"categories":["python"]},{"title":"在gitub-pages搭建Hexo博客","url":"/2020/12/20/setupHexoWebsite/","content":"\n\n我打算用**hexo**结合**github pages**构建一个轻博客网站，每周发表至少一篇博文。\n\n<!-- more -->\n\n### Hexo建站参考教程\n\n使用hexo建站到**github pages**的完整教程推荐如下：\n\nhttps://zhuanlan.zhihu.com/p/78467553\n\nhttps://segmentfault.com/a/1190000017986794\n\nhttps://theme-stun.github.io/docs/zh-CN/\n\nhttps://hexo.io/zh-cn/index.html\n\nhttps://blog.csdn.net/hhgggggg/article/details/77853665\n\n### 使用**Stun**主题\n\n[stun主题](https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E5%AE%89%E8%A3%85)比较好看，我还稍微配置了一下可以[跟typora连用](https://www.cnblogs.com/caoayu/articles/13855081.html)（主要是为了能够正常显示插图和附件）。效果如下图：\n\n![image-20201222100030247](https://sheldon-notes.oss-cn-shanghai.aliyuncs.com/img/image-20201222100030247.png)\n\n### 需要安装的插件列表\n\n1. git相关插件，用于deploy到github pages上\n2. search相关插件，方便对站内内容进行搜索\n3. asset-imager相关插件，方便插图附件之类的\n\n### 开启评论系统\n\ngitalk插件是利用github仓库的issue功能，为了节约空间，我另外开了一个**sea-comments**的仓库作为存储。然后照着以下教程进行操作：\n\nhttps://www.jianshu.com/p/4242bb065550\n\nhttps://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#gitalk\n\nhttps://github.com/gitalk/gitalk\n\n需要注意的是，stun主题已经嵌入了gitalk，只要到stun主题下的`_config.yaml`下添加自己评论仓库的一些信息即可。\n\n> gitalk会出现Error Network报错，弃用~，之后使用`valine`，评论数据存储在`LeanCloud`中，如有必要，及时备份。\n>\n> https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#valine\n\n### 常用命令\n\n需要进入到hexo网站的本地根目录下执行命令，以windows系统为例：\n\n1. `hexo clean && hexo g && hexo s`: 若修改了**_config.yaml**配置文件，需要清除 public目录下所有内容，然后根据新的配置文件重新生成静态网页，并且启动本地服务器\n2. `hexo clean && hexo d`：修改配置后，重新发布到gitee pages上。\n\n### 注意事项\n\n1. 尽量使用`hexo new`命令生成 pages或者新的markdown文件，然后到`_posts`目录下对markdown文件进行编辑修改（使用typora）。\n2. markdown文件命名只能为英文或者数字，而标题可以在markdown文件里边的**Front Matter YAML**中进行设定（**Front Matter YAML设定非常重要**，参考[链接](https://hexo.io/zh-cn/docs/front-matter)）。\n3. github仓库容量有限（< 1 GB），长期使用个人博客，注意不要插入太多太大的图片，建议是一篇博文图片不超过10张。\n4. 博客内容完全公开，注意不要发布违法或者引发舆论的内容，并注意保护个人隐私。","tags":["hexo"],"categories":["blog"]}]